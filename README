
  Overview
  ********

    The Autonomous Digital Adding Machine 1, or short ADAM/1, is an electronic
    digital computer based on 7400 series integrated circuits, with a word
    size of 16 bit (addresses and data).

    The CPU implements a microprogrammable CISC instruction set and does not
    differntiate between instruction and data memory (Von Neumann
    architecture).

    The initial design was sketched out on multiple napkins during a lunch
    break and is still awaiting completion. For now, the files in this
    directory contain a transcribed, sanitized version of the design.


  Directory Layout
  ****************

    README      - This file
    pcb/        - Contains geda PCB files for the CPU modules
    doc/        - Contains all the documentation
    doc/pcb/    - Contains circuit descriptions for the files in "pcb/"

  CPU Design
  **********
      _____________________________________
     |  _________________________________  |
     | |    ___              _____       | |       ____
     | |_|\|   |__________|\|     |/|__|\| |      |_R0_|
     |  _  | A |______   _  | I/O |  __  | |      |_R1_|
     | | |/|___|      | | |/|_____|\|  |/| |      |_R2_|
     | |              | |    _____       | |/|__|\|_R3_|
     | |              | |_|\|     |/|__|\| |  __  |_R4_|
     | |              |  _  | RAM |  __  | |\|  |/|_R5_|
     | |              | | |/|_____|\|  |/| |      |_R6_|
     | |    ___       | |                | |      |_R7_|
     | |_|\|   |______|_|______________|\| |     Register
     |___  | B |_   ___________________  | |       File
         |/|___| | |  | |              |/| |
                 | |  | |    _______     | |       _____
                 | |__|_|_|\|       |__|\| |/|__|\|     |
                 |  ______  | SHIFT |__  | |  __  | PSW |
                 | |  | | |/|_______|  |/| |\|  |/|_____|
                 | |  | |    _____       | |
                 | |  | |_|\|     |      | |       ___________
                 | |  |  _  | AND |____|\| |/|____|           |
                 | |  | | |/| OR  |____  | |  ____| Constants |
                 | |__|_|_|\| XOR |    |/| |\|    |___________|
                 |  ______  |     |      | |
                 | |  | | |/|_____|      | |
                 | |  | |    _____       | |
                 | |  | |_|\|     \      | |
                 | |  |___  |__    \ __|\| |
                 | |      |/   \ +  \__  | |
                 | |______|\ __/ -  /  |/|_|
                 |________  |      /
                          |/|_____/
                         Adder/Subtractor


    This drawing outlines the CPU architecture as seen by a programmer. The
    registers "A" and "B" are internal temporary registers that are not
    directly accessible by software and are used by the control logic for
    storing operands and intermediate results.

    The "PSW" register contains the processor status word and the block
    "Constants" contains various constant values used by the CPU.

    The CPU has a register file containing 8 registers. Most of them can be
    used for general purpose computations, except for R7, which is used by the
    control logic as program counter and R6 (kernel mode stack pointer).




    Below is a drawing illustrating the actual hardware design that
    implements the CPU architecture.


                                .
            HIGHER-HALF         .     LOWER-HALF
                                .
                                .
                      TRI-STATE . TRI-STATE
                         BUS    .    BUS
             ___          _     .     _          ___
            |   |/|____|\| |    .    | |/|____|\|   |
            | S |  ____  | |    .    | |  ____  | S |
            |___|\|    |/| |    .    | |\|    |/|___|
            SHIFT        | |    .    | |        SHIFT
          REGISTER       | |    .    | |      REGISTER
        ________         | |    .    | |         ________
       | LOGIC  |/|____|\| |    .    | |/|____|\| LOGIC  |
       | MODULE |  ____  | |    .    | |  ____  | MODULE |
       |________|\|    |/| |    .    | |\|    |/|________|
        ________         | |    .    | |         ________
       | ADDER  |/|____|\| |    .    | |/|____|\| ADDER  |
       | MODULE |  ____  | |    .    | |  ____  | MODULE |
       |________|\|    |/| |    .    | |\|    |/|________|
     ___________         | |    .    | |         ___________
    | CONSTANTS |/|____|\| |    .    | |/|____|\| CONSTANTS |
    |  MODULE   |  ____  | |    .    | |  ____  |  MODULE   |
    |___________|\|    |/| |    .    | |\|    |/|___________|
      __________         | |    .    | |         __________
     | REGISTER |/|____|\| |    .    | |/|____|\| REGISTER |
     |  MODULE  |  ____  | |    .    | |  ____  |  MODULE  |
     |__________|\|    |/| |    .    | |\|    |/|__________|
  ______________         | |    .    | |         ______________
 | MEMORY & I/O |/|____|\| |    .    | |/|____|\| MEMORY & I/O |
 |    MODULE    |  ____  | |    .    | |  ____  |    MODULE    |
 |______________|\|    |/| |    .    | |\|    |/|______________|
                         | |    .    | |         ________
                         | |    .    | |/|______| DECODE |
                         | |    .    | |  ______| MODULE |
                         | |    .    | |\|      |________|
                         | |    .    | |           A
                        _| |_   .   _| |_          |
                      __\___/_______\___/__        |
                     |                     |<------+
                     |    CONTROL LOGIC    |
                     |_____________________|


    Most of the CPU utilizes a bit-slice design and consits of individual
    8 bit modules that can be cascaded. The 8 bit modules are wired to a
    common control bus using 2*20 pin connectors and each half has its own
    8 bit tri-state data bus.

    Every modules has two temporary operand registers, A and B. All A
    registers are triggered at the same time and all B registers are triggered
    at the same time, but each module output can be selected individually.

    The control bus has a 5 bit source select address for selecting modules
    to write results to the data bus, a 3 bit destination register index and
    write control lines for writing the current bus word to one or more of the
    following: GP register, A operand, B operand, memory bus, I/O bus.

  1) Shift register module

     BUS
     | | SOUT
     | |<---------+
     | |          |
     | |/|________|__________________________
     | |  _________________________________  |
     | |\|   ___  |LSB      ___________    | |
     | |__|\|   |_|______|\|           |___| |
     | |__  | B |___   __  | Tri-state |___  |
     | |  |/|___|   | |  |/|   Buffer  |   | |
     | |            | |    |___________|   | |
     | |            | |     ___________    | |
     | |            | |__|\|           |___| |
     | |            |____  | Tri-state |_____|
     | | SIN             |/|   Buffer  |
     | |------------------>|___________|
     | |              MSB

    The shift register module contains only a B register (74HC574), connected
    to a 74HC245 output buffer, displaced by one line to implement a right
    shift operation. The MSB of the 74HC245 input is connected with the SIN
    line of the bus to ripple the LSB of the next stage through, while the LSB
    of the 74HC574 is connected to the SOUT line of the bus to get rippled
    through to the next lower stage.

    There is a second 74HC245, connected directly to the 74HC574 without
    displacement to allow the register to be used as temporary register for
    intermediate results. The two buffers can be triggered seperately, the
    shift buffer via the bus SHIFT line, the temporary register buffer via the
    bus TEMP line.

    The module only implements right shift/rotate as a left shift/rotate can
    be implemented by adding a number to itself.

  2) Logic module

     BUS
     | |
     | |/|_____________________________________________
     | |  ___________________________________________  |
     | |\|   ___      __________      ___________    | |
     | |__|\|   |__|\|          |    |           |___| |
     | |__  | A |__  | Bitwise  |__|\| Tri-state |_____|
     | |  |/|___|  |/|  Logic   |__  |   Buffer  |
     | |__|\|   |__|\| Function |  |/|___________|
     | |__  | B |__  |          |
     | |  |/|___|  |/|__________|
     | |


    The logic module has the A and B registers wired up to two 74HC logic
    gate ICs, like a 74HC08, 74HC32, 74HC86 or anything pin compatible.

    The logic module output enable is connected to a set of jumpers, allowing
    one of four ALU control lines to be used, so multiple logic modules with
    different logic gates can be installed in a system.

  3) Adder module

     BUS
     | |
     | |/|_______________________________________________________
     | |  _____________________________________________________  |
     | |\|             ___      _____           ___________    | |
     | |____________|\|   |__|\|     \         |           |___| |
     | |____________  | A |__  |__    \ _____|\| Tri-state |_____|
     | |    _____   |/|___|  |/   \ +  \_____  |   Buffer  |
     | |_|\|     |__|\|   |__|\ __/    /     |/|___________|
     | |_  | XOR |__  | B |__  |      /
     | | |/|_____|  |/|___|  |/|_____/
     | |      A
     | |      |
     | |------+
     | |


    The adder module feeds the A and B register through two cascaded 74HC283
    adder ICs.

    In addition to the A, B and output control lines, the adder module has the
    total carry input and carry output connected to the control bus to allow
    cascading of multiple adder modules.

    An additional control line allows the B register to be inverted BEFORE
    being latched, allowing the adder to be used for twos complement
    subtracting.

    The output enable for the adder is also connected to the bus via a jumper
    that can be set to one of the four ALU select lines.

  4) Register module

    BUS
    | |/|_____________
    | |  __________   |
    | |\|          |  |
    | |      ____  |  |
    | |___|\|    |_|  |
    |  ___  | R0 |_   |
    | |   |/|____| |  |
    | |      ____  |  |
    | |___|\|    |_|  |
    |  ___  | R1 |_   |
    | |   |/|____| |  |
    | |             \/
    | |      ....  .  .
    | |      ____  .  .
    | |___|\|    |_|\/|
    |  ___  | R7 |____|
    | |   |/|____|
    | |

    The register module has a total of 8 74HC574 registers wired up in
    parallel and connected to the data bus.

    The lower 3 bit of the source index are connected to a 74HC138 for
    selecting a register to write onto the bus. The 74HC138 is triggered
    by A4=1 and A3=0, mapping the 8 registers to the address range 10***
    for the source select.

    The 3 bit destination register index is connected to another 74HC138,
    with one positive enable control line, i.e. a falling edege on the enable
    line triggers a rising edge on the register clock, latching the current
    bus word in a register.

  5) Constant module

                                        VCC
    BUS                                  A
    | |     ___________    Diode Matrix  |
    | |    |           |---|-|-|-|-|-|-|-+
    | |    |           |---|-|-|-|-|-|-|-+
    | |/|__|           |---|-|-|-|-|-|-|-+
    | |  __| Tri-state |---|-|-|-|-|-|-|-+
    | |\|  |   Buffer  |---|-|-|-|-|-|-|-+
    | |    |           |---|-|-|-|-|-|-|-+
    | |    |           |---|-|-|-|-|-|-|-+
    | |    |___________|---|-|-|-|-|-|-|-+
    | |                   _|_|_|_|_|_|_|_
    | |                  |               |
    | |----------------->| Column-Select |
    | |                  |_______________|


    The constant module allows writing numeric constants to the bus. It
    connects the lower 3 bit of the source select address to a 74HC138 to
    select a constant to write onto the bus. The control signal for the
    output enable is generated by the decode module, mapping up to 8 constant
    values to the source address range 00***.

    Since the constant values are different for lower and higher order bytes,
    the diode rows have to be soldered in different ways for the intended use
    of the module.

    The currently intended constants are:

        000:  0
        001:  1     (for incrementing using the adder)
        010:  2     (address of syscall vector)
        011:  4     (address of interrupt vector)
        100: -1     (for decrementing using the adder and sign extending)
        101: 0x00FF (for low byte masking using the AND logic module)
        110: 0x8000 (for MSB masking using the AND logic module)
        111:

  6) Memory & I/O module

     BUS
     | |
     | |/|______________________________________________
     | |  ____________________________________________  |
     | |\|   ___       _______         ___________    | |
     | |__|\|   |___|\|       |/|___|\|           |/|_| |
     | |__  | A |___  |  BUS  |  ___  | Tri-state |  ___|
     | |  |/|___|   |/|_______|\|   |/|   Buffer  |\|
     | |           Address    Data    |___________|


    The Memory & I/O module connects the CPU to the external memory & I/O
    bus. The A register holds the memory or I/O device address, a tri-state
    buffer is used to connect either the external data bus to the internal
    bus or vice-versa (74HC245, direction controlable).

    The actual memory read & I/O read signals are generated by the decode
    module. The memory write & I/O write lines are generated directly by
    the control logic.

  7) Decode module

    The decode module decodes the 5 bit source address to individual control
    lines for the modules. The individual moduels are mapped into the address
    range 01***, where two addresses are used for memory read and I/O read.
    The decode module generates the propper bus direction and output enable
    signals for the memory & I/O module. The registers are mapped into the
    address range 10***, but the mapping is done by the register file itself
    instead of the decode module.

    The decode module also generates the propper bus direction and output
    enable signals for the I/O write and memory write signals triggered by
    the control logic.

    The decode module does not have to be built symetrically. Only one has to
    be installed, as the control lines can be simply connected to the second
    half of the bus.

