
  Programmers Manual
  ******************


    0.......Data quantities
    1.......CPU Registers
      1.1...Status Word
      1.2...Constants and Control Registers
      1.3...Assembly names
    2.......Instruction Format
    3.......CPU Instruction Set
    4.......Pseudo instruction and assembler directives
      4.1...Assember expressions
      4.2...Labels and symbols
      4.3...Octet strings
      4.4...UTF-16 strings
    5.......Interrupts and Traps



  0) Data quantities

    The CPU itself has a 16 bit word size and cannot address smaller
    quanitites of bits. Nevertheless, an octet (8 bits) is refererred to
    as a byte and instructions exist that operate on bytes in a register.
    See the table below for naming conventions:

    Bits  Name
       1  bit
       2  tayste
       4  nybble
       8  byte, octet, half word
      16  chomp, word
      32  playte, double word
      64  dynner, quad


  1) CPU Registers

    The CPU has a total of 8 general purpose registers (R0...R7). The
    registers are treated equally and can be used by all instructions.

    The control logic uses R7 as program counter. This removes the need
    for special jump instructions and special program counter hardware,
    as a value can be simply written into R7 or added to R7.

    The machine also doesn't have a dedicated stack pointer and PUSH/POP
    instructions but instead provides indirect post-increment or pre-decrement
    addressing modes that can be used for building a stack with any register
    as stack pointer.

    However, the control logic uses the register R6 as kernel stack pointer
    when a trap or interrupt occoures or user mode wishes to transfer machine
    control to the kernel, so it might be desireable to use R6 as stack
    pointer in kernel mode code.

  1.1) Status Word

    The processor control logic has an internal status word register
    with the following contents:

        15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
         *  *  *  *  *  *  *  *  *  *  M  U  I  S  Z  C
        |_____________ _____________|  |  |  |  |  |  |
                      |                |  |  |  |  |  +-- carry
                      |                |  |  |  |  +----- zero
                      |                |  |  |  +-------- sign
                      |                |  |  +----------- interrupt enable
                      |                |  +-------------- user mode
                      |                +----------------- MMU enable
                      +---------------------------------- reserved

    The carry, zero and sign flags are altered by arithmetic or logic
    instructions.

    The interrupt enable flag dictates whether the CPU handles hardware
    interrupts at all.

    When the U flag (user mode) is set, certain instructions cannot be
    executed (e.g. I/O) and only the S, Z and C flags in the status register
    can be changed.

    The M flag can be used to enable or disable a memory management unit (if
    one is attached to the CPU).

    The status register cannot be accessed like the general purpose registers.
    Special instructions exists for transfering it back and forth between GP
    registers or memory. A special instruction exists for setting or clearing
    the C, Z, S and I flags.

    The remaining bits are reserved for future use. They cannot be written and
    reading them results in undefined values.

  1.2) Constants and Control Registers

    The CPU has a number of "constants" that are used by the control logic.
    Some of them are hard wired (e.g. 0 for clearing registers or +1 for
    incrementing/decrementing) and some are actually registers (e.g.
    interrupt/trap handler address). Those registers are referred to as
    "control registers".

    There are 5 hard wired constants and 3 control registers. The control
    registers can be written only if the user mode flag is cleared.

  1.3) Assembly names

    The following register names can be used in assembly:

       Name | Description
      ------+----------------------------------------------------------------
        R0  | General purpose register 0
        R1  | General purpose register 1
        R2  | General purpose register 2
        R3  | General purpose register 3
        R4  | General purpose register 4
        R5  | General purpose register 5
        R6  | General purpose register 6 (kernel stack pointer)
        R7  | General purpose register 7 (program counter)
            |
        C0  | Constant value 0x0000
        C1  | Constant value 0x0001
        C2  | Constant value 0x0002
        C3  | Constant value 0x0003
        CL  | Constant value 0x00FF (low byte mask)
        CR0 | Control register 0 (syscall handler address)
        CR1 | Control register 1 (interrupt/trap handler address)
        CR2 | Control register 2 (kernel stack pointer backup)
            |
        SW  | Processor status word
            |
        PC  | Synonymous for R7
        SP  | Synonymous for R6

  2) Instruction Format

    All instructions are 16 bit in width and of the following format:

        15 14 13 12 11 10|9|8  7  6|5  4  3|2  1  0
              OPCODE     |I|M  M  M|  dst  |  src
                 |        |    |       |       |
                 |        |    |       |       +------- Source register index
                 |        |    |       |
                 |        |    |       +--------------- Desination register or
                 |        |    |                        flag index
                 |        |    |
                 |        |    +----------------------- Condition mode
                 |        |
                 |        +---------------------------- Immediate flag
                 |
                 +------------------------------------- Operation

    Immediate flag:
      Set if an immediate value follows, cleared if the next word is an
      instruction.

    Condition mode:
      0 0 0  Always execute the instruction
      0 0 1  Skip instruction if carry flag is set
      0 1 0  Skip instruction if zero flag is set
      0 1 1  Skip instruction if sign flag is set
      1 0 0  Never execute the instruction
      1 0 1  Skip instruction if carry flag is NOT set
      1 1 0  Skip instruction if zero flag is NOT set
      1 1 1  Skip instruction if sign flag is NOT set


    In most cases, register indices 0 to 7 refere to GP resiters R0 to R7.
    When accessing the constant/control register module, the values 0 to 4
    refere to the 5 constant values (0, 1, 2, 3, 0x00FF) and values 5 to 7
    refere to the control registers CR0 to CR2.

    If the destination index is used for addressing flag bits, the
    destionation values are interpreted as follows:
      0 0 0  clear carry
      0 0 1  clear zero
      0 1 0  clear sign
      0 1 1  clear interrupt enable
      1 0 0  set carry
      1 0 1  set zero
      1 1 0  set sign
      1 1 1  set interrupt enable



  3) CPU Instruction Set

    The table below lists the mnemonics of instructions, the coresponding
    opcodes and immediate flags, and the effect of an instruction. If an
    instruction or block of instructions requires further explanation, a
    comment is written below. Pseudo code with partially C-style operators
    is used to indicate what an instruction does.

    The assembler uses the prefix '@' to denote memory addresses and '>' to
    denote I/O bus addresses. A prefixed '+' or '-' indicates that a register
    value is to be increment/decrement before using it's value to address
    memory, an appended '+' or '-' means that it should be
    incremented/decremented afterwards.



    MOV dst, src            op=0x00 I=0     dst := src
    MOV dst, imm            op=0x00 I=1     dst := imm
    MOV dst, @src           op=0x01 I=0     dst := *(src)
    MOV dst, @imm           op=0x01 I=1     dst := *(imm)
    MOV @dst, src           op=0x02 I=0     *(dst) := src
    MOV @dst, imm           op=0x02 I=1     *(dst) := imm
    MOV @dst, @src          op=0x03 I=0     *(dst) := *(src)
    MOV @dst, @imm          op=0x03 I=1     *(dst) := *(imm)

    MOV @imm, src           op=0x04 I=1     *(imm) := src
    MOV @imm, @src          op=0x05 I=1     *(imm) := *(src)

    MOV dst, @src+          op=0x04 I=0     dst := *(src++)
    MOV @dst+, src          op=0x05 I=0     *(dst++) := src

    MOV dst, @src+imm       op=0x06 I=1     dst := src[imm]
    MOV @dst, @src+imm      op=0x07 I=1     *(dst) := src[imm]

    MVL dst, src            op=0x06 I=0     dst := src & 0x00FF
    MVH dst, src            op=0x07 I=0     dst := (src >> 8) & 0x00FF

    MOV @dst+imm, src       op=0x08 I=1     dst[imm] := src
    MOV @dst+imm, @src      op=0x09 I=1     dst[imm] := *(src)

    MKW dst, src            op=0x09 I=0     dst := dst | (src & 0x00FF)<<8

    MOV dst, SW             op=0x0A I=0     dst := SW
    MOV @imm, SW            op=0x0A I=1     *(imm) := SW

    MOV SW, dst             op=0x0B I=0     SW := dst
    MOV SW, imm             op=0x0B I=1     SW := imm

    MOV @dst-, src          op=0x0C I=0     *(dst--) := src
    MOV @dst-, imm          op=0x0C I=1     *(dst--) := imm

    MOV @dst-, SW           op=0x0D I=0     *(dst--) := SW

    MOV dst, @+src          op=0x0E I=0     dst := *(++src)
    MOV SW, @+src           op=0x0F I=0     SW := *(++src)

    ADD dst, src            op=0x10 I=0     dst += src
    ADD dst, imm            op=0x10 I=1     dst += imm
    ADC dst, src            op=0x11 I=0     dst += src + carry
    ADC dst, imm            op=0x11 I=1     dst += imm + carry
    ADD dst, src, imm       op=0x0E I=1     dst = src + imm
    ADC dst, src, imm       op=0x0F I=1     dst = src + imm + carry
        carry: carry output of adder
        zero:  set if result is 0
        sign:  set to MSB of result

    ASS dst, src            op=0x12 I=0     dst += src
    ASS dst, imm            op=0x12 I=1     dst += imm
    ASS dst, src, imm       op=0x13 I=1     dst = src + imm
        Add without carry, status bits are left unchanged

    SUB dst, src            op=0x13 I=0     dst += twos_comp(src)
    SBC dst, src            op=0x14 I=0     dst += not(src) + carry
        carry: carry output of adder
        zero:  set if result is 0
        sign:  set to MSB of result

    INC dst, src            op=0x15 I=0     dst := src + 1
    DEC dst, src            op=0x16 I=0     dst := src - 1
        carry: carry output of adder
        zero:  set if result is 0
        sign:  set to MSB of result

    SHL dst, src            op=0x17 I=0     dst := src << 1
    ROL dst, src            op=0x18 I=0     dst := (src << 1) | carry
        carry: set to MSB of source
        zero:  set if result is 0
        sign:  set to MSB of result

    SHR dst, src            op=0x19 I=0     dst := src >> 1
    ROR dst, src            op=0x1A I=0     dst := (src >> 1) | (carry<<15)
        carry: set to LSB of source
        zero:  set if result is 0
        sign:  set to MSB of result

    NOT dst, src            op=0x1B I=0     dst := not(src)
        zero:  set if result is 0
        sign:  set to MSB of result

    NEG dst, src            op=0x1C I=0     dst := twos_comp(src)
        carry: carry ouput from two's complement +1 addition
        zero:  set if result is 0
        sign:  set to MSB of result

    ANL dst, src            op=0x1D I=0     dst &= src
    ANL dst, imm            op=0x1D I=1     dst &= imm
    ANL dst, src, imm       op=0x14 I=1     dst = src & imm
    ORL dst, src            op=0x1E I=0     dst |= src
    ORL dst, imm            op=0x1E I=1     dst |= imm
    ORL dst, src, imm       op=0x15 I=1     dst = src | imm
    XOR dst, src            op=0x1F I=0     dst ^= src
    XOR dst, imm            op=0x1F I=1     dst ^= imm
    XOR dst, src, imm       op=0x16 I=1     dst = src ^ imm
        zero: set if result is 0
        sign: set to MSB of result

    SFL index               op=0x20 I=0     set or clear flag
      Only the C, Z, S and I flags can be changed by this instruction.

      The I flag cannot be changed if the user mode flag is set.

      The flag index is stored in the instruction destination index.

    SEX dst, src            op=0x21 I=0     subroutine execute
    SEX dst, imm            op=0x21 I=1     subroutine execute
      atomically execute the following:
        1. MOV @dst-, R7
        2. MOV R7, src|imm

    TMC                     op=0x22 I=0     transfer machine control
    TMC src                 op=0x22 I=0
    TMC imm                 op=0x22 I=1
      if user mode flag is set, atomically execute the following:
        1. temp := R6
        2. R6 := CR2
        3. *(R6--) := temp
        4. *(R6--) := R7
        5. *(R6--) := SW
        6. *(R6--) := <src|imm>
        7. R7 := CR0
        8. clear user mode flag

      if user mode flag is cleared, atomically execute the following:
        1. SW := *(++R6)
        2. R7 := *(++R6)
        3. R6 := *(++R6)

    CMP dst, src            op=0x23 I=0     compare register values
    CMP dst, imm            op=0x23 I=1     compare register with immediate
      subtract source or immediate from destination, ignore result.
        carry: set to carry output of adder
        zero: set if result is zero (dst==src or dst==imm)
        sign: set to MSB of result

    TST dst, src            op=0x24 I=0     test if bits are set
    TST dst, imm            op=0x24 I=1     test if bits are set
        zero: set if destination and source register have no overlapping bits,
              cleared if they do have overlapping bits
        sign: set to MSB of destination ANDed to MSB of source

    MOV >imm, src           op=0x0D I=1     write to immediate I/O address
    MOV >dst, src           op=0x25 I=0     write register to I/O bus
    MOV >dst, imm           op=0x25 I=1     write immediate to I/O bus
    MOV dst, >src           op=0x26 I=0     read from I/O bus
    MOV dst, >imm           op=0x26 I=1     read from immediate I/O address
        If used in user mode, a trap number 1 is generated.

    MOV dst, Vxx            op=0x08 I=0     read a constant or
    MOV dst, CRx                            control register

    MOV CRx, src            op=0x27 I=0     write a control register
    MOV CRx, imm            op=0x27,I=1
        If used in user mode, a trap number 1 is generated

    unused opcodes with immediate:
        0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x20

    entirely unused opcodes:
        0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
        0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
        0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F


  4) Pseudo instruction and assembler directives

    .org <exp>          set base address        assume program base address

    .def <name> <exp>
        All occourances of the given name within expressions is replaced
        with the parse tree of the given expression that is then evaluated,
        i.e. AFTER being inserted.

    .equ <name> <exp>
        All occourances of the given name within expressions is replaced
        with the VALUE of the given expression, i.e. the expression is
        evaluated BEFORE being inserted.

    .imp <name>         import label            see section on labels
    .exp <name>         export label            see section on labels

    .txt                                        enter text section
    .dat                                        enter data section
    .str                                        enter string section
    .sec <name>                                 enter arbitrary custom section
        If the target format supports different sections in the output,
        these directives can be used to switch sections.

    .dmw imm            dump machine word       write a value, truncated to
                                                the size of a word directly
                                                to the output

    .asc lh "<str>"     dump string to output   Characters are stored in
                                                LH LH LH ... order in words

    .asc hl "<str>"     dump string to output   Characters are stored in
                                                HL HL HL ... order in words

    .utf "<str>"        dump UTF-16 string

    <name> ':'                                  label definition

    NOP                 no operation            MOV R0, R0
    NUL dst             clear register          MOV dst, V0

    SEX reg                                     SEX R6, reg
    SEX imm                                     SEX R6, imm

    RET reg             return from subroutine  MOV R7, @+reg
    RET                                         MOV R7, @+R6

    JMP reg                                     MOV R7, reg
    JMP @reg                                    MOV R7, @reg
    JMP imm                                     MOV R7, imm
    JMP @imm                                    MOV R7, @imm
    JMP @reg+imm                                MOV R7, @reg+imm

    HOP reg             relative jump           ASS R7, reg
    HOP imm             relative jump           ASS R7, imm
    HOP label           relative jump to label  ASS R7, label-$$

    SUB dst, imm                                ADD dst, -imm
    SBC dst, imm                                ADC dst, ~imm

    SUB dst, src, imm                           ADD dst, src, -imm
    SBC dst, src, imm                           ADC dst, src, ~imm

    INC reg                                     INC reg, reg
    DEC reg                                     DEC reg, reg
    SHL reg                                     SHL reg, reg
    ROL reg                                     ROL reg, reg
    SHR reg                                     SHR reg, reg
    ROR reg                                     ROR reg, reg
    NOT reg                                     NOT reg, reg
    NEG reg                                     NEG reg, reg

    SET reg, imm        set bit in register     ORL reg, (1<<imm)
    CLR reg, imm        clear bit in register   ANL reg, ~(1<<imm)
    BIT reg, imm        test if bit is set      TST reg, (1<<imm)

    PSH dst, src        push GP register        MOV @dst-, src
    PSH dst, imm        push immediate value    MOV @dst-, imm
    PSH dst, $SW        push status word        MOV @dst-, SW

    PSH src                                     MOV @R6-, src
    PSH imm                                     MOV @R6-, imm
    PSH SW                                      MOV @R6-, SW

    POP dst, src        pop register            MOV dst, @+src
    POP SW, src         pop status word         MOV SW, @+src

    POP dst                                     MOV dst, @+R6
    POP SW                                      MOV SW, @+R6

    NAY C               clear flag              SFL 0
    NAY Z                                       SFL 1
    NAY S                                       SFL 2
    NAY I                                       SFL 3

    YAY C               set flag                SFL 4
    YAY Z                                       SFL 5
    YAY S                                       SFL 6
    YAY I                                       SFL 7

    NC.<instructon>     skip mode 1             execute if carry is not set
    NZ.<instructon>     skip mode 2             execute if zero is not set
    NS.<instructon>     skip mode 3             execute if sign is not set
    NX.<instructon>     skip mode 4             never execute instruction

    C.<instructon>      skip mode 5             execute if carry is set
    Z.<instructon>      skip mode 6             execute if zero is set
    S.<instructon>      skip mode 7             execute if sign is set


  4.1) Assember expressions

    In place of immediate values, the assembler supports simple arithmetic
    expressions that can be evaluated at translation time.

    The expression grammar is as follows (starting at ADDEXPR):

        ADDEXPR ::= MULEXPR ['+'|'-' ADDEXPR]
        MULEXPR ::= BITEXPR ['*'|'/' MULEXPR]
        BITEXPR ::= SHEXPR ['|'|'&'|'^' BITEXPR]
        SHEXPR ::= UNARY ['<<'|'>>' SHEXPR]

        UNARY ::= ['+'|'-'|'~'] PRIMEXPR
        PRIMEXPR ::= RECEXPR | NUMBER | NAMESTRING | '$$' | '$'
        RECEXPR ::= '(' ADDEXPR ')'


        NUMBER ::= HEXNUMBER | OCTNUMBER | DECNUMBER | BINNUMBER

        HEXNUMBER ::= '0x' [0-9a-fA-F]+
        OCTNUMBER ::= '0' [0-7]*
        DECNUMBER ::= [1-9] [0-9]*
        BINNUMBER ::= '0b' ('0'|'1')+

        NAMESTRING ::= [a-zA-Z_.] [a-zA-Z0-9_@.]*

    The element DECNUMBER represents a numeric constant in decimal notation,
    OCTNUMBER in octal notation, HEXNUMBER in hexadecimal notation and
    BINNUMBER in binary notation.

    The element NAMESTRING represents the name of a label or constant defined
    with the ".equ" directive or a sub expression defined with ".def".

    The special constant '$$' resolves to the absolute address of the next
    instruction and '$' resolves to the absolute address of the current
    instruction.

  4.2) Labels and symbols

    The assembler requires all labels that are not defined within an assembly
    file to be appear in an import (.imp) pseudo instruction. If the target
    format has symbol tables, the assembler writes the imported labels and the
    locations where the addresses are required into the symbol table.

    If labels are exported (.exp pseudo instruction) and the target format has
    a symbol tables, the labels and their addresses are written to that symbol
    table.

  4.3) Octet strings

    The ASCII (American Standards Code for Information Interchange) specifies
    a portable way of encoding a wide range of characters in 7 bit numbers.

    On computer systems where the word size is a multiple of 8, ASCII
    characters are typically stored as 8 bit quantities. The additional
    bit is often used to extend the character set with additional,
    proprietary character codes. In addition, a standard (UTF-8) has
    been developed that takes advantage of the additional bit to store
    unicode characters in a variable size encoding, while staying backwards
    compatbile to ASCII.

    The assembler supports the directive ".asc" to dump a string of 8 bit
    characters (encoding doesn't matter, typically ASCII, could also be
    UTF-8 or codepage-random, whatever octet string it "sees" in its input).

    Since the machine can only address 16 bit quantities, there are two
    possible ways to squeeze an octet stream into 16 bit memory slots:

     - The first character is stored in the lower half, the next character in
       the upper half.
     - The first character is stored in the upper half, the next character in
       the lower half.


    The first option is chosen by ".asc lh", the second option by ".asc hl".

    The result of the two options for the string "Hello World\0" is outline
    below, the rows repsent memory addresses, the column labeld "HI" the
    higher half of the word, the column "LO" the lower half

                                 |
        .asc lh "Hello World\0"  | .asc hl "Hello World\0"
                                 |
           HI  LO                |    HI   LO
        0  H   e                 | 0  e    H
        1  l   l                 | 1  l    l
        2  o  ' '                | 2  ' '  o
        3  W   o                 | 3  o    W
        4  r   l                 | 4  l    r
        5  d  '\0'               | 5  \0'  d



    As you might have noticed, the assembler supports C-style escape
    sequences in the specification of strings. The following escape
    sequences are supported:

      \a            0x07 (alarm bell)
      \b            0x08 (backspacce)
      \f            0x0C (form feed)
      \n            0x0A (line feed)
      \r            0x0D (cariage return)
      \t            0x09 (horizontal tab)
      \v            0x0B (vertical tab)
      \\            0x5C (backslash)
      \"            0x22 (double quotation mark)
      \OCTNUMBER         any arbitrary character code


    If the number of characters in the string is odd, the string is padded
    with a 0 value (character code 0) at the end.


  4.4) UTF-16 strings

    UTF-16 is standard means for encoding unicode characters in 16 bit
    words (1 word for the base plane, max. 2 words for everything else)
    and is a comparatively much simpler and straight forward way of
    encoding characters for a machine with 16 bit word size.

    The assembler supports dumping UTF-16 strings to the output by using the
    directive ".utf". The string that follows is assumed to be encoded in the
    same character set as the rest of the input file and converted to UTF-16
    if neccessary.

    In addtion to the escape sequences specified in the section above, the
    .utf directive also supports the sequence "\U+XXXXX" to specify an
    arbitrary unicode code point.


  5) Interrupts and Traps

    When a hardware interrupt or a processor trap (e.g. illegal op-code) is
    triggered, the CPU effectively performs the following operations:

        If user mode flag is set:
            1. temp := R6
            2. R6 := CR2
            3. *(R6--) := temp
            4. *(R6--) := R7
            5. *(R6--) := SW
            6. *(R6--) := <trap number>
            7. R7 := CR1
            8. clear user mode and interrupt enable flags
        otherwise:
            1. *(R6--) := R6
            2. *(R6--) := R7
            3. *(R6--) := SW
            4. *(R6--) := <trap number>
            4. R7 := CR1
            5. clear interrupt enable flags


    The following trap numbers are generated by the CPU:
        0   A hardware interrupt occoured
        1   Illegal OP-Code encountered
        2   Privileged instruction encountered in user mode
        3   MMU Page fault



    A handler routine can return from an interrupt or trap by using the
    TMC instruction after removing the trap number from the stack.

    In case of a trap, execution of the current instruction is aborted.
    Returning from the trap hadler causes the same instruction to be
    executed again.

    In case of a hardware interrupt, execution of the current instruction
    is completed before jumping into the handler routine. Returning from
    the interrupt handler causes the next instruction to be executed.

